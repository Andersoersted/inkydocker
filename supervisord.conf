[supervisord]
nodaemon=true
logfile=/dev/null

[program:flask]
# Using a config file to ensure proper multiprocessing settings for CUDA compatibility
command=gunicorn -c gunicorn_config.py app:app
directory=/app
autostart=true
autorestart=true
# Add restart on SIGSEGV
stopsignal=TERM
stopwaitsecs=10
# Set a higher priority to ensure it gets CPU time
priority=10
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:celery]
# Increased max memory per child and added timeout settings
# Set FORKED_BY_MULTIPROCESSING to ensure proper multiprocessing behavior with CUDA
environment=FORKED_BY_MULTIPROCESSING=1
command=celery -A tasks.celery worker --loglevel=warning --max-memory-per-child=1000000 -c 1 --time-limit=600 --soft-time-limit=540 --pool=solo
directory=/app
autostart=true
autorestart=true
# Add restart on SIGSEGV
stopsignal=TERM
stopwaitsecs=10
# Set a lower priority than Flask
priority=20
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

# Redis is now started in entrypoint.sh before supervisord

[program:scheduler]
command=python scheduler.py
directory=/app
autostart=true
autorestart=true
# Set the lowest priority
priority=30
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0